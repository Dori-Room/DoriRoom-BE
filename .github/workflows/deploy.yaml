name: Deploy to EC2

on:
  push:
    branches: [ "bug/15-workflow" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소 Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2. JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. Gradle 캐시 설정
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Gradle Build
      - name: Build JAR
        run: ./gradlew clean build -x test

      # 5. Docker 이미지 Build
      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }} .

      # 6. DockerHub 로그인
      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 7. DockerHub 푸시
      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}

      # 8. EC2 접속하여 Docker 컨테이너 실행
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            echo "${{ secrets.APPLICATION_YML }}" | base64 -d > app.yml
            docker stop backend || true
            docker rm backend || true
            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }} || true
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}
            docker run -d -p 8080:8080 --name backend \
              -v $(pwd)/app.yml:/app/config/application.yml \
              -e SPRING_CONFIG_LOCATION=file:/app/config/ \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE_NAME }}
